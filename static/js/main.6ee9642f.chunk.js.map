{"version":3,"sources":["logo.svg","utils/constants.js","context/TransactionContext.jsx","App.js","reportWebVitals.js","index.js"],"names":["contractABI","abi","TransactionContext","React","createContext","ethereum","window","transactionContract","signer","ethers","providers","Web3Provider","getSigner","Contract","getEthereumContract","TransactionProvider","children","checkIfWalletIsConnected","alert","request","method","useEffect","Provider","value","App","assert","require","mcl","curveTest","curveType","name","init","then","console","log","a","Fr","setInt","equal","getStr","setStr","b","setByCSPRNG","deserialize","serialize","deepEqual","add","sub","mul","div","neg","inv","isEqual","sqr","isZero","isOne","setHashOf","dump","Uint8Array","FrTest","P","G1","clear","Q","R1","R2","r","dbl","R3","normalize","R4","setX","getX","isValid","setY","getY","setZ","getZ","G1Test","G2","G2Test","x","pairing","n","y","t","i","z","pow","GTTest","Fp","serializeSubTest","deserializeHexStrToFp","length","setLittleEndian","c","P1","hashAndMapToG1","P2","mapToG1","FpTest","Fp2","xs","set_a","set_b","deserializeHexStrToFp2","as","bs","get_a","get_b","Q1","hashAndMapToG2","Q2","mapToG2","Fp2Test","x0","x1","y0","y1","z0","z1","memberTest","forEach","g1s","g2s","push","String","mulVecGeneric","w1","mulVec","z2","w2","deserializeHexStrToFr","deserializeHexStrToG1","deserializeHexStrToG2","e","GT","deserializeHexStrToGT","serializeTest","msk","mpk","id","sk","m","d","U","v","hashToFr","IDdec","IDenc","IDbasedEncryptionTest","ab","aP","bQ","ePQ","e2","millerLoop","e3","finalExp","Qcoeff","PrecomputedG2","precomputedMillerLoop","destroy","Q1coeff","Q2coeff","e1","precomputedMillerLoop2","precomputedMillerLoop2mixed","C","bench","PairingTest","mod","mclBnFr_malloc","mclBnG1_malloc","mclBnG2_malloc","mclBnGT_malloc","mclBnFr_setStr","_mclBnFr_mul","mclBnFr_getStr","mclBnG1_hashAndMapTo","mclBnG2_hashAndMapTo","_mclBnG1_mul","_mclBnG2_mul","_mclBn_pairing","_mclBnGT_pow","_mclBnGT_isEqual","free","PairingCapiTest","s","Array","from","unshift","setLittleEndianMod","shiftAndSetTest","modTest","msg","C2","benchAll","stdCurveTest","getBasePointG1","R","arithTest","BN254","BN_SNARK1","BLS12_381","SECP224K1","SECP256K1","NIST_P192","NIST_P256","Cstr","xVec","yVec","newDeserializeHexStr","serializeToHexStr","deserializeHexStr","label","count","func","start","Date","now","duration","useContext","ethWallet","useState","account","setAccount","network","setNetwork","password","setPassword","firstName","setFirstName","lastName","setLastName","email","setEmail","registerUser","EthUtil","privateKeyString","Web3","utils","sha3","privateKeyBuffer","toBuffer","addressData","fromPrivateKey","trasactionHash","createUser","getAddressString","getPrivateKeyString","connectAccount","accounts","getAllAccount","getAllUsers","availableTransactions","loadBlockchainData","web3","givenProvider","eth","getAccounts","curveTestAll","className","type","onChange","target","onClick","map","single","_hex","toLocaleString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6ee9642f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import abi from './Transactions.json';\r\n\r\nexport const contractABI = abi.abi;\r\nexport const contractAddress = '0xbAAE112C5B8D81Dd975C57745F8E655DC7063236';\r\n ","import React,{useEffect,useState} from 'react';\r\nimport {ethers} from 'ethers';\r\n\r\nimport { contractABI,contractAddress } from '../utils/constants';\r\n\r\nexport const TransactionContext = React.createContext();\r\n\r\n\r\nconst {ethereum} = window;\r\n\r\nconst getEthereumContract = ()=>{\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const transactionContract = new ethers.Contract(contractAddress,contractABI,signer);\r\n\r\n    return transactionContract;\r\n}\r\n\r\n\r\n\r\nconst transactionContract = getEthereumContract();\r\n\r\n\r\n\r\n\r\n\r\nexport const TransactionProvider = ({children})=>{\r\n    const checkIfWalletIsConnected = async ()=>{\r\n    if(!ethereum) return alert(\"Please install metamask\");\r\n    const accounts = await ethereum.request({method:'eth_accounts'});\r\n   \r\n    \r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkIfWalletIsConnected();\r\n    },[]);\r\nreturn(\r\n    <TransactionContext.Provider value={{transactionContract,ethereum}}>\r\n        {children}\r\n    </TransactionContext.Provider>\r\n)\r\n}","import React,{useContext } from 'react';\nimport logo from './logo.svg';\n\nimport { useState,useEffect } from 'react';\n\nimport Web3 from 'web3';\nimport { TransactionContext } from './context/TransactionContext';\nimport './App.css';\n\n\n \n\n\nfunction App() {\n  const assert = require('assert')\n\n  const mcl = require('mcl-wasm');\n  \n  const curveTest = (curveType, name) => {\n  mcl.init(curveType)\n  .then(() => {\n  try {\n  console.log(`name=${name}`)\n  FrTest()\n  G1Test()\n  G2Test()\n  GTTest()\n  FpTest()\n  Fp2Test()\n  memberTest()\n  mulVecTest()\n  serializeTest()\n  IDbasedEncryptionTest()\n  PairingTest()\n  PairingCapiTest()\n  modTest()\n  console.log('all ok')\n  benchAll()\n  } catch (e) {\n  console.log(`TEST FAIL ${e}`)\n  assert(false)\n  }\n  })\n  }\n  \n  const stdCurveTest = (curveType, name) => {\n  mcl.init(curveType)\n  .then(() => {\n  try {\n  console.log(`name=${name}`)\n  arithTest()\n  } catch (e) {\n  console.log(`TEST FAIL ${e}`)\n  assert(false)\n  }\n  })\n  }\n  \n  function arithTest () {\n  const P = mcl.getBasePointG1()\n  console.log(`basePoint=${P.getStr(16)}`)\n  let Q = mcl.add(P, P) // x2\n  Q = mcl.add(Q, Q) // x4\n  Q = mcl.add(Q, Q) // x8\n  Q = mcl.add(Q, P) // x9\n  const r = new mcl.Fr()\n  r.setStr('9')\n  const R = mcl.mul(P, r)\n  assert(R.isEqual(Q))\n  }\n  \n  async function curveTestAll () {\n  // can't parallel\n  await curveTest(mcl.BN254, 'BN254')\n  await curveTest(mcl.BN_SNARK1, 'SNARK')\n  // await curveTest(mcl.BN381_1, 'BN381_1')\n  await curveTest(mcl.BLS12_381, 'BLS12_381')\n  // await curveTest(mcl.BN462, 'BN462')\n  \n  await stdCurveTest(mcl.SECP224K1, 'secp224k1')\n  await stdCurveTest(mcl.SECP256K1, 'secp256k1')\n  // await stdCurveTest(mcl.SECP384R1, 'secp384r1')\n  await stdCurveTest(mcl.NIST_P192, 'NIST_P192')\n  await stdCurveTest(mcl.NIST_P256, 'NIST_P256')\n  }\n  \n  \n  \n  function FrTest () {\n  const a = new mcl.Fr()\n  a.setInt(5)\n  assert.equal(a.getStr(), '5')\n  a.setStr('65535')\n  assert.equal(a.getStr(), '65535')\n  assert.equal(a.getStr(16), 'ffff')\n  a.setStr('ff', 16)\n  assert.equal(a.getStr(), '255')\n  a.setStr('0x10')\n  assert.equal(a.getStr(), '16')\n  assert.equal(a.getStr(16), '10')\n  const b = new mcl.Fr()\n  a.setByCSPRNG()\n  b.deserialize(a.serialize())\n  assert.deepEqual(a.serialize(), b.serialize())\n  a.setStr('1000000000020')\n  b.setInt(-15)\n  assert.equal(mcl.add(a, b).getStr(), '1000000000005')\n  assert.equal(mcl.sub(a, b).getStr(), '1000000000035')\n  a.setInt(200)\n  b.setInt(20)\n  assert.equal(mcl.mul(a, b).getStr(), '4000')\n  assert.equal(mcl.div(a, b).getStr(), '10')\n  assert.equal(mcl.mul(mcl.div(b, a), a).getStr(), '20')\n  a.setInt(-123)\n  assert.equal(mcl.neg(a).getStr(), '123')\n  assert.equal(mcl.mul(a, mcl.inv(a)).getStr(), '1')\n  a.setInt(123459)\n  assert(mcl.mul(a, a).isEqual(mcl.sqr(a)))\n  \n  a.setInt(3)\n  assert(!a.isZero())\n  assert(!a.isOne())\n  a.setInt(1)\n  assert(!a.isZero())\n  assert(a.isOne())\n  a.setInt(0)\n  assert(a.isZero())\n  assert(!a.isOne())\n  a.setInt(5)\n  b.setInt(3)\n  assert(!a.isEqual(b))\n  b.setInt(5)\n  assert(a.isEqual(b))\n  \n  a.setHashOf('abc')\n  a.dump()\n  b.setHashOf(new Uint8Array([97, 98, 99]))\n  assert(a.isEqual(b))\n  assert(mcl.sub(a, b).isEqual(mcl.neg(mcl.sub(b, a))))\n  }\n  \n  function FpTest () {\n  const a = new mcl.Fp()\n  a.setHashOf('abc')\n  serializeSubTest(mcl.Fp, a, mcl.deserializeHexStrToFp)\n  const b = new Uint8Array(a.serialize().length)\n  for (let i = 0; i < b.length; i++) {\n  b[i] = i\n  }\n  a.setLittleEndian(b)\n  const c = a.serialize()\n  // b[b.length - 1] may be masked\n  for (let i = 0; i < b.length - 1; i++) {\n  assert(b[i] === c[i])\n  }\n  const P1 = mcl.hashAndMapToG1('abc')\n  a.setHashOf('abc')\n  const P2 = a.mapToG1()\n  assert(P1.isEqual(P2))\n  \n  {\n  const b = new mcl.Fp()\n  const c = new mcl.Fp()\n  a.setInt(3)\n  b.setInt(5)\n  c.setInt(8)\n  assert(mcl.add(a, b).isEqual(c))\n  assert(mcl.sub(a, b).isEqual(mcl.neg(mcl.sub(b, a))))\n  c.setInt(-2)\n  assert(mcl.sub(a, b).isEqual(c))\n  c.setInt(15)\n  assert(mcl.mul(a, b).isEqual(c))\n  assert(mcl.div(c, a).isEqual(b))\n  c.setInt(9)\n  assert(mcl.sqr(a).isEqual(c))\n  }\n  }\n  \n  function Fp2Test () {\n  const x = new mcl.Fp2()\n  let xs = x.serialize()\n  for (let i = 0; i < xs.length; i++) {\n  assert(xs[i] === 0)\n  }\n  const a = new mcl.Fp()\n  const b = new mcl.Fp()\n  a.setHashOf('abc')\n  b.setHashOf('123')\n  x.set_a(a)\n  x.set_b(b)\n  serializeSubTest(mcl.Fp2, x, mcl.deserializeHexStrToFp2)\n  xs = x.serialize()\n  const as = a.serialize()\n  const bs = b.serialize()\n  for (let i = 0; i < as.length; i++) {\n  assert(xs[i] === as[i])\n  }\n  const n = xs.length / 2\n  for (let i = 0; i < bs.length; i++) {\n  assert(xs[n + i] === bs[i])\n  }\n  const y = new mcl.Fp2()\n  y.set_a(x.get_a())\n  y.set_b(x.get_b())\n  assert(x.isEqual(y))\n  y.clear()\n  y.setStr(x.getStr())\n  assert(x.isEqual(y))\n  y.clear()\n  y.setStr(x.getStr(16), 16)\n  assert(x.isEqual(y))\n  \n  /*\n  hashAndMapToG2(msg) = [setHashOf(msg), 0].mapToG2()\n  */\n  const Q1 = mcl.hashAndMapToG2('xyz')\n  a.setHashOf('xyz')\n  b.clear()\n  x.set_a(a)\n  x.set_b(b)\n  const Q2 = x.mapToG2()\n  assert(Q1.isEqual(Q2))\n  \n  x.setInt(3, 5)\n  a.setInt(3)\n  assert(x.get_a().isEqual(a))\n  a.setInt(5)\n  assert(x.get_b().isEqual(a))\n  y.setInt(2, 7)\n  const z = new mcl.Fp2()\n  z.setInt(5, 12)\n  assert(mcl.add(x, y).isEqual(z))\n  z.setInt(1, -2)\n  assert(mcl.sub(x, y).isEqual(z))\n  assert(mcl.sub(a, b).isEqual(mcl.neg(mcl.sub(b, a))))\n  // (3 + 5i)(2 + 7i) = (6 - 35) + i(21+10) = -29 + 31i\n  z.setInt(-29, 31)\n  assert(mcl.mul(x, y).isEqual(z))\n  assert(mcl.div(z, x).isEqual(y))\n  // (3 + 5i)^2 = (9 - 25) + 30i = -16 + 30i\n  z.setInt(-16, 30)\n  assert(mcl.sqr(x).isEqual(z))\n  // 1/(3+5i) = (3-5i)/(9+25)\n  a.setInt(3)\n  b.setInt(34)\n  z.set_a(mcl.div(a, b))\n  a.setInt(-5)\n  z.set_b(mcl.div(a, b))\n  assert(mcl.inv(x).isEqual(z))\n  }\n  \n  function G1Test () {\n  const P = new mcl.G1()\n  assert(P.isZero())\n  P.clear()\n  assert(P.isZero())\n  P.setHashOf('abc')\n  const Q = new mcl.G1()\n  Q.setHashOf('abc')\n  assert(P.isEqual(Q))\n  Q.setHashOf('abcd')\n  assert(!P.isEqual(Q))\n  let R1 = mcl.add(P, Q)\n  let R2 = mcl.add(Q, P)\n  assert(R1.isEqual(R2))\n  R1 = mcl.sub(R1, R2)\n  assert(R1.isZero())\n  R1 = mcl.add(P, P) // 3P\n  R1 = mcl.add(R1, P)\n  const r = new mcl.Fr()\n  r.setInt(3)\n  R2 = mcl.mul(P, r) // 3P\n  assert(R1.isEqual(R2))\n  R1 = mcl.dbl(P)\n  R2 = mcl.add(P, P)\n  assert(R1.isEqual(R2))\n  const R3 = mcl.normalize(R1)\n  assert(R1.isEqual(R3))\n  const R4 = new mcl.G1()\n  R4.setX(R1.getX())\n  assert(!R4.isValid())\n  R4.setY(R1.getY())\n  assert(!R4.isValid())\n  R4.setZ(R1.getZ())\n  assert(R4.isValid())\n  assert(R1.isEqual(R4))\n  }\n  \n  function G2Test () {\n  const P = new mcl.G2()\n  assert(P.isZero())\n  P.clear()\n  assert(P.isZero())\n  P.setHashOf('abc')\n  const Q = new mcl.G2()\n  Q.setHashOf('abc')\n  assert(P.isEqual(Q))\n  Q.setHashOf('abcd')\n  assert(!P.isEqual(Q))\n  let R1 = mcl.add(P, Q)\n  let R2 = mcl.add(Q, P)\n  assert(R1.isEqual(R2))\n  R1 = mcl.sub(R1, R2)\n  assert(R1.isZero())\n  R1 = mcl.add(P, P) // 3P\n  R1 = mcl.add(R1, P)\n  const r = new mcl.Fr()\n  r.setInt(3)\n  R2 = mcl.mul(P, r) // 3P\n  assert(R1.isEqual(R2))\n  R1 = mcl.dbl(P)\n  R2 = mcl.add(P, P)\n  assert(R1.isEqual(R2))\n  const R3 = mcl.normalize(R1)\n  assert(R1.isEqual(R3))\n  const R4 = new mcl.G2()\n  R4.setX(R1.getX())\n  assert(!R4.isValid())\n  R4.setY(R1.getY())\n  assert(!R4.isValid())\n  R4.setZ(R1.getZ())\n  assert(R4.isValid())\n  assert(R1.isEqual(R4))\n  }\n  \n  function GTTest () {\n  const P = new mcl.G1()\n  const Q = new mcl.G2()\n  P.setHashOf('abc')\n  Q.setHashOf('abc')\n  const x = mcl.pairing(P, Q)\n  const n = 200\n  let y = x\n  let t = new mcl.Fr()\n  t.setInt(1)\n  for (let i = 0; i < n; i++) {\n  y = mcl.sqr(y)\n  t = mcl.add(t, t)\n  }\n  const z = mcl.pow(x, t)\n  assert(y.isEqual(z))\n  }\n  \n  function PairingTest () {\n  const a = new mcl.Fr()\n  const b = new mcl.Fr()\n  \n  a.setStr('123')\n  b.setStr('456')\n  const ab = mcl.mul(a, b)\n  assert.equal(ab.getStr(), 123 * 456)\n  \n  const P = mcl.hashAndMapToG1('aaa')\n  const Q = mcl.hashAndMapToG2('bbb')\n  const aP = mcl.mul(P, a)\n  const bQ = mcl.mul(Q, b)\n  \n  const ePQ = mcl.pairing(P, Q)\n  {\n  const e2 = mcl.pairing(aP, bQ)\n  assert(mcl.pow(ePQ, ab).isEqual(e2))\n  }\n  \n  // pairing = millerLoop + finalExp\n  {\n  const e2 = mcl.millerLoop(P, Q)\n  const e3 = mcl.finalExp(e2)\n  assert(ePQ.isEqual(e3))\n  }\n  // precompute Q for fixed G2 point\n  {\n  const Qcoeff = new mcl.PrecomputedG2(Q)\n  const e2 = mcl.precomputedMillerLoop(P, Qcoeff)\n  const e3 = mcl.finalExp(e2)\n  assert(ePQ.isEqual(e3))\n  Qcoeff.destroy() // call this function to avoid memory leak\n  }\n  const P2 = mcl.hashAndMapToG1('ccc')\n  const Q2 = mcl.hashAndMapToG2('ddd')\n  {\n  const Q1coeff = new mcl.PrecomputedG2(Q)\n  const Q2coeff = new mcl.PrecomputedG2(Q2)\n  const e1 = mcl.mul(mcl.pairing(P, Q), mcl.pairing(P2, Q2))\n  let e2 = mcl.precomputedMillerLoop2(P, Q1coeff, P2, Q2coeff)\n  e2 = mcl.finalExp(e2)\n  let e3 = mcl.precomputedMillerLoop2mixed(P, Q, P2, Q2coeff)\n  e3 = mcl.finalExp(e3)\n  assert(e1.isEqual(e2))\n  assert(e1.isEqual(e3))\n  const C = 100\n  bench('precomputedMillerLoop2', C, () => mcl.precomputedMillerLoop2(P, Q1coeff, P2, Q2coeff))\n  bench('precomputedMillerLoop2mixed', C, () => mcl.precomputedMillerLoop2mixed(P, Q, P2, Q2coeff))\n  // call this function to avoid memory leak\n  Q2coeff.destroy()\n  Q1coeff.destroy()\n  }\n  }\n  \n  function mulVecGeneric (Cstr, xVec, yVec) {\n  let z = new Cstr()\n  for (let i = 0; i < xVec.length; i++) {\n  z = mcl.add(z, mcl.mul(xVec[i], yVec[i]))\n  }\n  return z\n  }\n  \n  function mulVecTest () {\n  [1, 2, 3, 15, 30, 100].forEach(n => {\n  const xs = []\n  const g1s = []\n  const g2s = []\n  for (let i = 0; i < n; i++) {\n  const x = new mcl.Fr()\n  x.setByCSPRNG()\n  xs.push(x)\n  g1s.push(mcl.hashAndMapToG1('A' + String(i)))\n  g2s.push(mcl.hashAndMapToG2('A' + String(i)))\n  }\n  const z1 = mulVecGeneric(mcl.G1, g1s, xs)\n  const w1 = mcl.mulVec(g1s, xs)\n  assert(z1.isEqual(w1))\n  const z2 = mulVecGeneric(mcl.G2, g2s, xs)\n  const w2 = mcl.mulVec(g2s, xs)\n  assert(z2.isEqual(w2))\n  /*\n  const C = 100\n  bench('mulVecGen', C, () => mulVecGeneric(mcl.G1, g1s, xs))\n  bench('mulVecG1', C, () => mcl.mulVec(g1s, xs))\n  bench('mulVecGen', C, () => mulVecGeneric(mcl.G2, g2s, xs))\n  bench('mulVecG2', C, () => mcl.mulVec(g2s, xs))\n  */\n  })\n  }\n  \n  // Enc(m) = [r P, m + h(e(r mpk, H(id)))]\n  function IDenc (id, P, mpk, m) {\n  const r = new mcl.Fr()\n  r.setByCSPRNG()\n  const Q = mcl.hashAndMapToG2(id)\n  const e = mcl.pairing(mcl.mul(mpk, r), Q)\n  return [mcl.mul(P, r), mcl.add(m, mcl.hashToFr(e.serialize()))]\n  }\n  \n  // Dec([U, v]) = v - h(e(U, sk))\n  function IDdec (c, sk) {\n  const [U, v] = c\n  const e = mcl.pairing(U, sk)\n  return mcl.sub(v, mcl.hashToFr(e.serialize()))\n  }\n  \n  function IDbasedEncryptionTest () {\n  // system parameter\n  const P = mcl.hashAndMapToG1('1')\n  /*\n  KeyGen\n  msk in Fr ; master secret key\n  mpk = msk P in G1 ; master public key\n  */\n  const msk = new mcl.Fr()\n  msk.setByCSPRNG()\n  const mpk = mcl.mul(P, msk)\n  \n  /*\n  user KeyGen\n  sk = msk H(id) in G2 ; secret key\n  */\n  const id = '@herumi'\n  const sk = mcl.mul(mcl.hashAndMapToG2(id), msk)\n  \n  // encrypt\n  const m = new mcl.Fr()\n  m.setInt(123)\n  const c = IDenc(id, P, mpk, m)\n  // decrypt\n  const d = IDdec(c, sk)\n  assert(d.isEqual(m))\n  }\n  \n  function PairingCapiTest () {\n  const mod = mcl.mod\n  const a = mod.mclBnFr_malloc()\n  const b = mod.mclBnFr_malloc()\n  const ab = mod.mclBnFr_malloc()\n  const P = mod.mclBnG1_malloc()\n  const aP = mod.mclBnG1_malloc()\n  const Q = mod.mclBnG2_malloc()\n  const bQ = mod.mclBnG2_malloc()\n  const e1 = mod.mclBnGT_malloc()\n  const e2 = mod.mclBnGT_malloc()\n  \n  mod.mclBnFr_setStr(a, '123')\n  mod.mclBnFr_setStr(b, '456')\n  mod._mclBnFr_mul(ab, a, b)\n  assert.equal(mod.mclBnFr_getStr(ab), 123 * 456)\n  \n  mod.mclBnG1_hashAndMapTo(P, 'aaa')\n  mod.mclBnG2_hashAndMapTo(Q, 'bbb')\n  mod._mclBnG1_mul(aP, P, a)\n  mod._mclBnG2_mul(bQ, Q, b)\n  \n  mod._mclBn_pairing(e1, P, Q)\n  mod._mclBn_pairing(e2, aP, bQ)\n  mod._mclBnGT_pow(e1, e1, ab)\n  assert(mod._mclBnGT_isEqual(e1, e2), 'e(aP, bQ) == e(P, Q)^ab')\n  \n  mcl.free(e2)\n  mcl.free(e1)\n  mcl.free(bQ)\n  mcl.free(Q)\n  mcl.free(aP)\n  mcl.free(P)\n  mcl.free(ab)\n  mcl.free(b)\n  mcl.free(a)\n  }\n  \n  function serializeSubTest (Cstr, x, newDeserializeHexStr) {\n  const y = new Cstr()\n  y.deserialize(x.serialize())\n  assert(y.isEqual(x))\n  y.clear()\n  const s = x.serializeToHexStr()\n  y.deserializeHexStr(s)\n  assert(y.isEqual(x))\n  const z = newDeserializeHexStr(s)\n  assert(z.isEqual(x))\n  }\n  \n  function serializeTest () {\n  const a = new mcl.Fr()\n  a.setStr('12345678')\n  serializeSubTest(mcl.Fr, a, mcl.deserializeHexStrToFr)\n  const P = mcl.hashAndMapToG1('abc')\n  serializeSubTest(mcl.G1, P, mcl.deserializeHexStrToG1)\n  const Q = mcl.hashAndMapToG2('abc')\n  serializeSubTest(mcl.G2, Q, mcl.deserializeHexStrToG2)\n  const e = mcl.pairing(P, Q)\n  serializeSubTest(mcl.GT, e, mcl.deserializeHexStrToGT)\n  }\n  \n  function shiftAndSetTest (a, b) {\n  a.setStr('1')\n  a = mcl.neg(a)\n  const s = Array.from(a.serialize())\n  s.unshift(0)\n  s.unshift(6) // [<-1>data][0][6] = -65536 + 6 = -65530\n  a.setLittleEndianMod(s)\n  a = mcl.neg(a)\n  b.setStr('65530')\n  assert(a.isEqual(b))\n  }\n  function modTest () {\n  const a = new mcl.Fr()\n  const b = new mcl.Fr()\n  shiftAndSetTest(a, b)\n  /* Fp::neg is not yet implemented\n  {\n  const a = new mcl.Fp()\n  const b = new mcl.Fp()\n  shiftAndSetTest(a, b)\n  }\n  */\n  }\n  \n  function memberTest () {\n  console.log('memberTest')\n  const x0 = new mcl.Fp()\n  const x1 = new mcl.Fp()\n  const y0 = new mcl.Fp()\n  const y1 = new mcl.Fp()\n  const z0 = new mcl.Fp()\n  const z1 = new mcl.Fp()\n  \n  x0.setInt(10)\n  x1.setInt(11)\n  y0.setInt(12)\n  y1.setInt(13)\n  z0.setInt(1)\n  z1.setInt(0)\n  \n  const x = new mcl.Fp2()\n  const y = new mcl.Fp2()\n  const z = new mcl.Fp2()\n  \n  x.set_a(x0)\n  x.set_b(x1)\n  y.set_a(y0)\n  y.set_b(y1)\n  z.set_a(z0)\n  z.set_b(z1)\n  \n  const P = new mcl.G2()\n  P.setX(x)\n  P.setY(y)\n  P.setZ(z)\n  \n  assert.equal(P.getStr(), \"1 10 11 12 13\")\n  assert.equal(P.getX().get_a().getStr(), \"10\")\n  assert.equal(P.getX().get_b().getStr(), \"11\")\n  assert.equal(P.getY().get_a().getStr(), \"12\")\n  assert.equal(P.getY().get_b().getStr(), \"13\")\n  assert.equal(P.getZ().get_a().getStr(), \"1\")\n  assert.equal(P.getZ().get_b().getStr(), \"0\")\n  }\n  \n  function bench (label, count, func) {\n    const start = Date.now();\n  //const start = performance.now()\n  for (let i = 0; i < count; i++) {\n  func()\n  }\n\n  const duration = Date.now() - start;\n  console.log(label+\" took \" + ' ' + duration)\n  }\n  \n  function benchAll () {\n  const a = new mcl.Fr()\n  \n  const msg = 'hello wasm'\n  \n  a.setByCSPRNG()\n  let P = mcl.hashAndMapToG1('0xF46b6B9C7cB552829C1D3dFd8FFb11aaBaE782F6')\n  let Q = mcl.hashAndMapToG2('abc')\n  const P2 = mcl.hashAndMapToG1('abce')\n  const Q2 = mcl.hashAndMapToG2('abce')\n  const Qcoeff = new mcl.PrecomputedG2(Q)\n  const e = mcl.pairing(P, Q)\n  \n  console.log('benchmark')\n  const C = 100\n  const C2 = 1000\n  bench('T_Fr::setByCSPRNG', C, () => a.setByCSPRNG())\n  bench('T_pairing', C, () => mcl.pairing(P, Q))\n  bench('T_millerLoop', C, () => mcl.millerLoop(P, Q))\n  bench('T_finalExp', C, () => mcl.finalExp(e))\n  bench('T_precomputedMillerLoop', C, () => mcl.precomputedMillerLoop(P, Qcoeff))\n  bench('T_G1::add', C2, () => { P = mcl.add(P, P2) })\n  bench('T_G1::dbl', C2, () => { P = mcl.dbl(P) })\n  bench('T_G1::mul', C, () => { P = mcl.mul(P, a) })\n  bench('T_G2::add', C2, () => { Q = mcl.add(Q, Q2) })\n  bench('T_G2::dbl', C2, () => { Q = mcl.dbl(Q) })\n  bench('T_G2::mul', C, () => { Q = mcl.mul(Q, a) })\n  bench('T_hashAndMapToG1', C, () => mcl.hashAndMapToG1(msg))\n  bench('T_hashAndMapToG2', C, () => mcl.hashAndMapToG2(msg))\n  \n  let b = new mcl.Fr()\n  b.setByCSPRNG()\n  bench('T_Fr::add', C2, () => { b = mcl.add(b, a) })\n  bench('T_Fr::mul', C2, () => { b = mcl.mul(b, a) })\n  bench('T_Fr::sqr', C2, () => { b = mcl.sqr(b) })\n  bench('T_Fr::inv', C2, () => { b = mcl.inv(b) })\n  \n  let e2 = mcl.pairing(P, Q)\n  bench('T_GT::add', C2, () => { e2 = mcl.add(e2, e) })\n  bench('T_GT::mul', C2, () => { e2 = mcl.mul(e2, e) })\n  bench('T_GT::sqr', C2, () => { e2 = mcl.sqr(e2) })\n  bench('T_GT::inv', C, () => { e2 = mcl.inv(e2) })\n  \n  Qcoeff.destroy()\n  }\n  \n  /*\n  function benchPairingCapi () {\n  console.log('c api')\n  const mod = mcl.mod\n  const a = mod.mclBnFr_malloc()\n  const P = mod.mclBnG1_malloc()\n  const Q = mod.mclBnG2_malloc()\n  const e = mod.mclBnGT_malloc()\n  \n  const msg = 'hello wasm'\n  \n  mod._mclBnFr_setByCSPRNG(a)\n  mod.mclBnG1_hashAndMapTo(P, 'abc')\n  mod.mclBnG2_hashAndMapTo(Q, 'abc')\n  bench('time_pairing', 50, () => mod._mclBn_pairing(e, P, Q))\n  bench('time_g1mul', 50, () => mod._mclBnG1_mulCT(P, P, a))\n  bench('time_g2mul', 50, () => mod._mclBnG2_mulCT(Q, Q, a))\n  bench('time_mapToG1', 50, () => mod.mclBnG1_hashAndMapTo(P, msg))\n  \n  mcl.free(e)\n  mcl.free(Q)\n  mcl.free(P)\n  }\n  */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const {transactionContract,ethereum} = useContext(TransactionContext);\n  const ethWallet = require('ethereumjs-wallet');\n  const [account, setAccount] = useState('');\n  const [balance, setBalance] = useState('');\n  const [network, setNetwork] = useState([]);\n  const [password, setPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n\n\n  const registerUser = async() => {\n    var EthUtil = require('ethereumjs-util');\n    const start = Date.now();\n    \n    const privateKeyString = Web3.utils.sha3(password);//your privateKey\n    const privateKeyBuffer = EthUtil.toBuffer(privateKeyString);\n    let addressData = ethWallet['default'].fromPrivateKey(privateKeyBuffer);  \n    const trasactionHash = transactionContract.createUser(addressData.getAddressString(),firstName,lastName,addressData.getPrivateKeyString()); \n\n      const duration = Date.now() - start;\n      console.log(`registration done ${duration} mseconds...`);\n    console.log({trasactionHash});\n  }\n\n  const connectAccount = async ()=>{\n    const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n    if(accounts.length)\n    setAccount(accounts[0]);\n\n}\nconst getAllAccount = async ()=>{\n  const availableTransactions = await transactionContract.getAllUsers();\n  setNetwork(availableTransactions);\n  console.log({availableTransactions});\n // return availableTransactions;\n}\n  useEffect(()=>{\n    curveTestAll();\n    loadBlockchainData();\n    connectAccount();\n    getAllAccount();\n  },[]);\n\n\n\n  \n\n  useEffect(()=>{\n console.log({account});\n  },[account]);\n\n\n\n\n  \n  \n  async function loadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[1]);\n  }\n\n   const submitReg = ()=>{\n    loadBlockchainData();\n  }\n\n  return (\n    <div className=\"container\">\n    \n      <div className='row py-10'>\n        <h3 className=\"p-5\">Patient Registration {account}</h3>\n      <div  className=\"col-md-3\"></div>\n      <div  className=\"row col-md-6\">\n         <div className=\"form-group\">\n          <label>First Name</label><br></br>\n          <input type='text' className=\"form-control\" value={firstName} onChange={e=>setFirstName(e.target.value)}/>\n         </div>\n         <div className=\"form-group\">\n          <label>Last Name</label><br></br>\n          <input type='text' className=\"form-control\" value={lastName} onChange={e=>setLastName(e.target.value)}/>\n         </div>\n         <div className=\"form-group\">\n          <label>Email</label><br></br>\n          <input type='email' className=\"form-control\" value={email} onChange={e=>setEmail(e.target.value)}/>\n         </div>\n\n         <div className=\"form-group\">\n          <label>Private keyword</label><br></br>\n          <input type='password' className=\"form-control\" value={password} onChange={e=>setPassword(e.target.value)}/>\n         </div>\n\n         <button onClick={registerUser} className=\"mt-5 btn btn-primary\">Register</button>\n        </div>\n        <div  className=\"col-md-3\"></div>\n        </div>\n\n        <table className='table table-bordered table-striped'>\n          <thead>\n          <tr>\n            <th>Public key</th>\n            <th>First Name</th>\n            <th>Date time</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n           \n             network.map((single,i)=>(\n                <tr key={i}>\n                   <td>{single[0]}</td>\n                  <td>{single[1]}</td>\n                  <td>{new Date(single[4]._hex*1000).toLocaleString()}</td>\n                </tr>\n             ))\n          }\n          </tbody>\n        </table>\n\n\n\n        <h3>Virtual Consultancy - Patient Privacy with Certificateless Deniable Authentication</h3>\n       \n    </div>\n  );\n\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { TransactionProvider } from './context/TransactionContext';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <TransactionProvider>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </TransactionProvider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}